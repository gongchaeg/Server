generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             Int         @id @unique @default(autoincrement())
  nickname                       String?     @db.VarChar(50)
  profileImage                   String?     @db.VarChar(500)
  intro                          String?     @db.VarChar(100)
  createdAt                      DateTime    @default(now())
  updatedAt                      DateTime?   @updatedAt @db.Timestamp(6)
  social_platform                String?     @db.VarChar(10)
  social_id                      String?     @db.VarChar(50)
  refresh_token                  String?     @db.VarChar(500)
  email                          String?     @db.VarChar(100)
  Alarm_Alarm_receiverIdToUser   Alarm[]     @relation("Alarm_receiverIdToUser")
  Alarm_Alarm_senderIdToUser     Alarm[]     @relation("Alarm_senderIdToUser")
  Block_Block_userIdToUser       Block[]     @relation("Block_userIdToUser")
  Block_Block_friendIdToUser     Block[]     @relation("Block_friendIdToUser")
  Bookshelf                      Bookshelf[]
  Friend_Friend_senderIdToUser   Friend[]    @relation("Friend_senderIdToUser")
  Friend_Friend_receiverIdToUser Friend[]    @relation("Friend_receiverIdToUser")
  recommendToToUser              Recommend[] @relation("Recommend_recommendToToUser")
  recommendedByToUser            Recommend[] @relation("Recommend_recommendedByToUser")
  Report_Report_userIdToUser     Report[]    @relation("Report_userIdToUser")
  Report_Report_friendIdToUser   Report[]    @relation("Report_friendIdToUser")
}

model Book {
  id        Int         @id @unique @default(autoincrement())
  bookTitle String      @db.VarChar(500)
  author    String      @db.VarChar(100)
  bookImage String?     @db.VarChar(500)
  publisher String      @db.VarChar(50)
  Bookshelf Bookshelf[]
  Recommend Recommend[]
}

model Bookshelf {
  id           Int            @id @unique @default(autoincrement())
  pickIndex    Int            @default(0)
  description  String?        @db.VarChar(200)
  memo         String?        @db.VarChar(50)
  userId       Int
  bookId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt @db.Timestamp(6)
  Book         Book           @relation(fields: [bookId], references: [id], onDelete: NoAction, map: "bookshelf_book_id_fk")
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "bookshelf_user_id_fk")
  NewBookAlarm NewBookAlarm[]
}

model Friend {
  followId         Int  @id @unique @default(autoincrement())
  receiverId       Int
  senderId         Int
  senderIdToUser   User @relation("Friend_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade, map: "friend_user_id_fk_2")
  receiverIdToUser User @relation("Friend_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade, map: "friend_user_id_fk")
}

model Alarm {
  id               Int              @id @unique @default(autoincrement())
  createdAt        DateTime         @default(now())
  receiverId       Int
  senderId         Int
  typeId           Int
  receiverIdToUser User             @relation("Alarm_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade, map: "alarm_user_id_fk")
  senderIdToUser   User             @relation("Alarm_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade, map: "alarm_user_id_fk_2")
  NewBookAlarm     NewBookAlarm[]
  RecommendAlarm   RecommendAlarm[]
}

model Recommend {
  id                  Int              @id @unique @default(autoincrement())
  recommendDesc       String?          @db.VarChar(200)
  recommendedBy       Int
  recommendTo         Int
  bookId              Int
  Book                Book             @relation(fields: [bookId], references: [id], onDelete: Cascade, map: "recommend_book_id_fk")
  createdAt           DateTime         @default(now())
  recommendToToUser   User             @relation("Recommend_recommendToToUser", fields: [recommendTo], references: [id], onDelete: Cascade, map: "recommend_user_id_fk_2")
  recommendedByToUser User             @relation("Recommend_recommendedByToUser", fields: [recommendedBy], references: [id], onDelete: Cascade, map: "recommend_user_id_fk")
  RecommendAlarm      RecommendAlarm[]
}

model RecommendAlarm {
  id          Int       @id @unique @default(autoincrement())
  alarmId     Int
  recommendId Int
  Alarm       Alarm     @relation(fields: [alarmId], references: [id], onDelete: Cascade, map: "alarm_id_fk")
  Recommend   Recommend @relation(fields: [recommendId], references: [id], onDelete: Cascade, map: "recommend_id_fk")
}

model NewBookAlarm {
  id          Int       @id @unique @default(autoincrement())
  alarmId     Int
  bookshelfId Int
  Alarm       Alarm     @relation(fields: [alarmId], references: [id], onDelete: Cascade, map: "alarm_id_fk")
  Bookshelf   Bookshelf @relation(fields: [bookshelfId], references: [id], onDelete: Cascade, map: "bookshelf_id_fk")
}

model AlarmType {
  id       Int     @id @default(autoincrement())
  typeName String? @db.VarChar(50)
}

model Block {
  id                        Int  @id @unique @default(autoincrement())
  userId                    Int
  friendId                  Int
  User_Block_userIdToUser   User @relation("Block_userIdToUser", fields: [userId], references: [id], onDelete: Cascade, map: "block_user_id_fk")
  User_Block_friendIdToUser User @relation("Block_friendIdToUser", fields: [friendId], references: [id], onDelete: Cascade, map: "block_user_id_fk_2")
}

model Report {
  id                         Int     @id @unique @default(autoincrement())
  userId                     Int
  friendId                   Int
  reasonIndex                Int?
  etc                        String? @db.VarChar(300)
  User_Report_userIdToUser   User    @relation("Report_userIdToUser", fields: [userId], references: [id], onDelete: Cascade, map: "report_user_id_fk")
  User_Report_friendIdToUser User    @relation("Report_friendIdToUser", fields: [friendId], references: [id], onDelete: Cascade, map: "report_user_id_fk_2")
}

model Version {
  id                  Int     @id @default(autoincrement())
  androidForceVersion String? @db.VarChar(255)
  imageUrl            String? @db.VarChar(500)
  text                String? @db.VarChar(255)
  iosForceVersion     String? @db.VarChar(255)
}
